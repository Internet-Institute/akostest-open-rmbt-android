import groovy.json.JsonSlurper

import java.util.regex.Matcher
import java.util.regex.Pattern
import at.specure.*

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: "$project.rootDir/tools/utils.gradle"
apply from: "$project.rootDir/tools/script-lint.gradle"
apply from: "$project.rootDir/tools/script-ktlint.gradle"
apply from: "$project.rootDir/tools/script-detekt.gradle"

apply from: "$project.rootDir/tools/config-reader.gradle"

applyPrivate "signing/signing-config.gradle"
applyPrivate "app/analytics.gradle"
applyPrivate "app/flavor-config.gradle"

android {

    def projectName

    compileSdkVersion config.targetSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        compileSdkVersion config.targetSdkVersion
        buildToolsVersion config.buildToolsVersion

        testInstrumentationRunner "androidx.text.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField "java.util.Date", "BUILD_TIME", "new java.util.Date(" + System.currentTimeMillis() + "L)"
        buildConfigField "String", "COMMIT_HASH", "\"${getGitHash()}\""
        buildConfigField "int", "VERSION_CODE", "${versionCode}"
        buildConfigField "String", "VERSION_NAME", "\"${versionName}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        dataBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    task getCurrentFlavor() {
        Gradle gradle = getGradle()
        String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

        Pattern pattern

        if (tskReqStr.contains("assemble"))
//            pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
            pattern = Pattern.compile("assemble(\\w+)")
        else
            pattern = Pattern.compile("generate(\\w+)")
//            pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

        Matcher matcher = pattern.matcher(tskReqStr)

        if (matcher.find()) {
            projectName = matcher.group(1).toLowerCase() // Changing to 2 will return build type, 1 provides product flavor
        } else {
            println "NO MATCH FOUND"
        }
    }

    task myTask(type: Copy) {
        dependsOn getCurrentFlavor
        println "flavor name is $projectName"
        def flavorDimension = projectName
        def buildType = ""
        if (flavorDimension != null) {
            if ((flavorDimension as String).contains("debug") || (flavorDimension as String).contains("Debug")) {
                buildType = "debug"
            } else if ((flavorDimension as String).contains("release") || (flavorDimension as String).contains("Release")) {
                buildType = "release"
            } else {
                throw new IllegalArgumentException("An unknown build variant is using. Please add it in tools/config-reader.gradle file")
            }


            flavorDimension = projectName - buildType
            println("flavorDimension: ${flavorDimension}")

            def jsonFile
            if (isPrivate) {
                jsonFile = file("$project.rootDir/private/app/src/${flavorDimension}/config.json")
            } else {
                jsonFile = file("$project.rootDir/app/src/${flavorDimension}/config.json")
            }

            def parsedJson = new JsonSlurper().parseText(jsonFile.text)

            println "-------------${flavorDimension}--------------"

            def configClass = "at.rtr.rmbt.android.util.ConfigValue"

            parsedJson.config.each {
                if (it._section == null) {
//                    if (verbose) {
//                        println "${it.name} ${it.value} ${it.visible}"
//                    }
//                    buildConfigField "java.util.Date", "BUILD_TIME", "new java.util.Date(" + System.currentTimeMillis() + "L)"
//                    buildConfigField("$configClass", it.name, "new ${configClass}(\"${it.name}\", \"${it.value}\", ${it.visible})")
                    android.defaultConfig.buildConfigField "$configClass", it.name, "new ${configClass}(\"${it.name}\", \"${it.value}\", ${it.visible})"

                }
            }
        }
    }
    preBuild.dependsOn myTask
}

dependencies {
    implementation project(path: ':core')
    implementation project(path: ':location')
    implementation project(path: ':location-fused')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.core:core-ktx:$versions.androidx_core"
    implementation "com.google.android.material:material:$versions.material"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefresh_layout"
    implementation "androidx.vectordrawable:vectordrawable:$versions.vectordrawable"
    implementation "androidx.navigation:navigation-fragment:$versions.navigation_fragment"
    implementation "androidx.navigation:navigation-ui:$versions.navigation_ui"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle_extensions"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation_fragment"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation_fragment"
    implementation "com.google.android.gms:play-services-maps:$versions.google_services"

    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"

    implementation "androidx.work:work-runtime-ktx:$versions.work_manager"

    implementation "com.jakewharton.timber:timber:$versions.timber"

    implementation "androidx.preference:preference-ktx:$versions.androidx_preference"
    implementation "com.github.zcweng:switch-button:$versions.switch_button"

    debugImplementation "com.facebook.stetho:stetho:$versions.stetho"

    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "androidx.test:runner:$versions.test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso_core"
    androidTestImplementation "androidx.test:rules:$versions.rules"
}